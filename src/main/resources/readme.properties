#SpringApplication 将从以下位置加载 application.properties 文件，并把
#它们添加到Spring Environment 中：
#1. 当前目录下的 /config 子目录。
#2. 当前目录。
#3. classpath下的 /config 包。
#4. classpath根路径（root） 。
#该列表是按优先级排序的（列表中位置高的路径下定义的属性将覆盖位置低的） 


#如果不喜欢将 application.properties 作为配置文件名，你可以通过指
#定 spring.config.name 环境属性来切换其他的名称，也可以使
#用 spring.config.location 环境属性引用一个明确的路径（目录位置或文件路
#径列表以逗号分割）



#日志
#默认的日志配置会在写日志消息时将它们回显到控制台，级别为 ERROR  ,
#WARN  和 INFO  的消息会被记录。你可以在启动应用时，通过 --debug  标识开启
#控制台的 DEBUG  级别日志记录，也可以在 application.properties  中指
#定 debug=true  。
#$ java -jar myapp.jar --debug
#当debug模式启用时，一系列核心loggers（内嵌容器，Hibernate，Spring Boot
#等）记录的日志会变多，但不会输出所有的信息。
#相应地，你可以在启动应用时，通过 --trace  （或
#在 application.properties  设置 trace=true  ）启用"trace"模式，该模式能够
#追踪核心loggers（内嵌容器，Hibernate生成的schema，Spring全部的portfolio）
#的所有日志信息
#默认情况下，Spring Boot只会将日志记录到控制台，而不写进日志文件，如果需
#要，你可以设置 logging.file  或 logging.path  属性（例
#如 application.properties  ）。
#日志文件每达到10M就会被分割，跟控制台一样，默认记录 ERROR  ,
#WARN  和 INFO  级别的信息。
#所有Spring Boot支持的日志系统都可以在Spring  Environment  中设置级别
#（ application.properties  里也一样），设置格式为'logging.level.*=LEVEL'，
#其中 LEVEL  是 TRACE  ,  DEBUG  ,  INFO  ,  WARN  ,  ERROR  ,  FATAL  ,  OFF  之
#一：
#以下是 application.properties  示例：
#logging.level.root=WARN
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR
#注 默认情况，Spring Boot会重新映射Thymeleaf的 INFO  信息到 DEBUG  级别，这
#能减少标准日志输出的噪声